plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
}

android {
    compileSdk libs.versions.compileSdk.get().toInteger()
    namespace "com.wgllss.dynamic.sample.other"

    defaultConfig {
        minSdkVersion libs.versions.minSdk.get().toInteger()
        targetSdkVersion libs.versions.targetSdkVersion.get().toInteger()
        versionCode 1
        versionName "1.0"
    }

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}


dependencies {

    compileOnly project(path: ':Wgllss-Dynamic-Plugin-Common-Library')
    compileOnly project(path: ':wgllss-common-re-library')

    compileOnly project(path: ':wgllss-sample-business-library')
    compileOnly project(path: ':wgllss-business-re-library')
    compileOnly project(path: ':Wgllss-Dynamic-Plugin-Manager')


    compileOnly project(path: ':Wgllss-Dynamic-Host-Runtime-Lib')
    compileOnly project(path: ':Wgllss-Dynamic-Host-Download-Lib')
    compileOnly project(path: ':Wgllss-Dynamic-Host-ClassLoader-Lib')
    compileOnly project(path: ':Wgllss-Dynamic-Host-Loader-Lib')
    compileOnly project(path: ':Wgllss-Dynamic-Host-Provider-Lib')
    compileOnly project(path: ':Wgllss-Dynamic-Host-Lib-Impl')


    compileOnly libs.androidx.core.ktx
    compileOnly libs.appcompat
    compileOnly libs.androidx.recyclerview
    compileOnly libs.google.material
    compileOnly libs.constraintlayout

    compileOnly libs.androidx.lifecycle.runtime.ktx
    compileOnly libs.androidx.activity.ktx
    compileOnly libs.androidx.fragment.ktx

    compileOnly libs.converter.gson
    compileOnly libs.mmkv

    compileOnly libs.glide
    //权限申请框架
    compileOnly libs.xxpermissions
    compileOnly libs.androidx.legacy.legacy.support.v44
}


def createCopyTask(buildType) {
    def workingDirPath = rootProject.ext.workingDirPath
    def outputFile = file("${workingDirPath}classes_other.jar")
    def outputDexFile = file("${workingDirPath}classes_other_dex.jar")
    def lastOutputDexFile = file("${rootProject.getBuildDir()}/classes_other_dex")
    if (lastOutputDexFile.exists()) {
        lastOutputDexFile.delete()
    }
    if (outputDexFile.exists()) {
        outputDexFile.delete()
    }
    if (outputFile.exists()) {
        outputFile.delete()
    }
    def inputFile = file("${getProject().getBuildDir()}/intermediates/aar_main_jar/${buildType}/sync${buildType}LibJars/classes.jar")
    def copyTask = tasks.create("assembleCopy${buildType.capitalize()}", Copy) {
        group = 'other'
        description = "复制${name}到dx环境中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())
    }.dependsOn("assemble${buildType.capitalize()}")
    def assembleDxCommand = tasks.create("assembleDxCommand", Exec) {
        group = 'other'
        description = "${name}到dx执行中..."
        workingDir workingDirPath
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            it.commandLine 'cmd', '/c', "d8 --output ${outputDexFile.name} ${outputFile.name}"
        } else {
            it.commandLine 'bash', '-c', "d8 --output ${outputDexFile.name} ${outputFile.name}"
        }
//        it.commandLine 'cmd', "/c", "d8 --output ${outputDexFile.name} ${outputFile.name}"
    }.dependsOn(copyTask.name)

    return tasks.create("assembleDxCommandAndCopy") {
        doLast {
            copy {
                from(outputDexFile.getParent()) {
                    include(outputDexFile.name)
                    rename { lastOutputDexFile.name }
                }
                into(lastOutputDexFile.getParent())
            }
        }
    }.dependsOn(assembleDxCommand.name)
}

tasks.whenTaskAdded { task ->
//    if (task.name == "assembleDebug") {
//        createCopyTask("Debug")
//    }
    if (task.name == "assembleRelease") {
        createCopyTask("Release")
    }
}