plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.compose.compiler)
}

android {
    compileSdk libs.versions.compileSdk.get().toInteger()
    namespace "com.wgllss.dynamic.sample.other2"

    defaultConfig {
        minSdkVersion libs.versions.minSdk.get().toInteger()
        targetSdkVersion libs.versions.targetSdkVersion.get().toInteger()
        versionCode 1
        versionName "1.0"
    }

    buildFeatures {
        buildConfig true
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.7.0"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation project(':Wgllss-Dynamic-Plugin-Common-Library')
    implementation project(':wgllss-common-re-library')
    implementation project(':wgllss-business-re-library')
    implementation project(':wgllss-sample-business-library')

    implementation project(':Wgllss-Dynamic-Plugin-Manager')
    implementation project(':Wgllss-Dynamic-Plugin-Library')

    implementation project(':Wgllss-Dynamic-Host-Provider-Lib')
    implementation project(':Wgllss-Dynamic-Host-Download-Lib')
    implementation project(':Wgllss-Dynamic-Host-Lib-Impl')
    implementation project(':Wgllss-Dynamic-Host-Loader-Lib')

    implementation libs.androidx.core.ktx
    implementation libs.appcompat
    implementation libs.androidx.recyclerview
    implementation libs.google.material
    implementation libs.constraintlayout

    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.activity
    implementation libs.androidx.activity.ktx
    implementation libs.androidx.fragment.ktx

    implementation libs.glide
    implementation libs.palette.ktx

    implementation libs.org.jsoup.jsoup
    implementation libs.exoplayer.core
    implementation libs.exoplayer.ui
    compileOnly libs.google.extension.mediasession

    //compose
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation libs.androidx.constraintlayout.compose
    implementation libs.androidx.runtime.livedata
    implementation libs.coil.compose
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.navigation.runtime.ktx
    implementation libs.androidx.compose.material3.adaptive.navigation
    implementation libs.androidx.compose.material3.adaptive
    implementation libs.androidx.compose.material3.adaptive.layout
    implementation libs.androidx.compose.material3.navigationSuite
    implementation libs.androidx.compose.material3.windowSizeClass
}

def commandDex(buildType) {
    def workingDirPath = rootProject.ext.workingDirPath
    def outputFile = file("${workingDirPath}classes_other2.jar")
    def outputDexFile = file("${workingDirPath}classes_other2_dex.jar")
    def lastOutputDexFile = file("${rootProject.getBuildDir()}/classes_other2_dex")
    if (lastOutputDexFile.exists()) {
        lastOutputDexFile.delete()
    }
    if (outputDexFile.exists()) {
        outputDexFile.delete()
    }
    if (outputFile.exists()) {
        outputFile.delete()
    }
    def inputFile = file("${getProject().getBuildDir()}/intermediates/aar_main_jar/${buildType}/sync${buildType}LibJars/classes.jar")
    def copyTask = tasks.create("assembleCopy${buildType.capitalize()}", Copy) {
        group = 'other'
        description = "复制${name}到dx环境中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())
    }.dependsOn("assemble${buildType.capitalize()}")

    def assembleDxCommand = tasks.create("assembleDxCommand", Exec) {
        group = 'other'
        description = "${name}到dx执行中..."
        workingDir workingDirPath
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            it.commandLine 'cmd', '/c', "d8 --output ${outputDexFile.name} ${outputFile.name}"
        } else {
            it.commandLine 'bash', '-c', "d8 --output ${outputDexFile.name} ${outputFile.name}"
        }
//        it.commandLine 'cmd', "/c", "d8 --output ${outputDexFile.name} ${outputFile.name}"
    }.dependsOn(copyTask.name)

    return tasks.create("assembleDxCommandAndCopy") {
        doLast {
            copy {
                from(outputDexFile.getParent()) {
                    include(outputDexFile.name)
                    rename { lastOutputDexFile.name }
                }
                into(lastOutputDexFile.getParent())
            }
        }
    }.dependsOn(assembleDxCommand.name)
}

tasks.whenTaskAdded { task ->
    if (task.name == "assembleRelease") {
        commandDex("Release")
    }
//    if (task.name == "assembleDxCommand") {
//        assembleCopyToHost.dependsOn assembleDxCommand
//    }
}
